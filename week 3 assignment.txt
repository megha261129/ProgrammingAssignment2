
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.



 ## coursera week 3 assignment ##Github user : megha261129
 ##this function creates a special "matrix" object that can cache its inverse
 makeCacheMatrix<-function(x = matrix()){    
inv <- NULL   ##initializing inverse as null
set <- function (y){
 x <<- y
 inv <<- NULL
 }
 get<- function ()x    ##function to get matrix x
 setinv<- function (inverse) inv<<- inverse
 getinv<- function()inv
 list(set = set , get=get , setinverse = setinverse , getinverse = getinverse)
 }
 
 ##this function computes the inverse of the special " matrix" created by makeCacheMatrix
 ##if the inverse has already been calculated ( and the matrix has not changes) , 
 ##then it should retreive inverse from the cache
 cacheSolve <- function (x,...){   ## return a matrix that is the inverse of x
 inv<- x$getinverse()
 if(!is.null(inv)){
 message("getting cached data")
 return(inv)
 }
 data<- x$get()
 inv<-solve(data,...)
 x$setinverse(inv)
 inv
 }

 
